@page "/products"
@using Microsoft.AspNetCore.Components.Forms

@inject ProductService ProductService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject TransactionService TransactionService

@rendermode InteractiveServer

<h3>List of items</h3>

@if (products == null)
{
    <p><em>Завантаження...</em></p>
}
else if (!products.Any())
{
    <p>Немає товарів на складі. <NavLink href="add-product">Додати новий товар</NavLink></p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>SKU</th>
                <th>Quantity</th>
                <th>Unit of measurement</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.SKU</td>
                    <td>@product.Quantity</td>
                    <td>@product.UnitOfMeasure</td>
                    <td>
                        <button class="btn btn-info btn-sm" @onclick="() => EditProduct(product.Id)">Edit</button>
                        <button class="btn btn-success btn-sm" @onclick="() => ShowTransactionModal(product, TransactionType.Incoming)">Incoming</button>
                        <button class="btn btn-warning btn-sm" @onclick="() => ShowTransactionModal(product, TransactionType.Outgoing)">Consumption</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@($"Операція {(currentTransactionType == TransactionType.Incoming ? "приходу" : "витрати")} для {selectedProduct?.Name}")</h5>
                    <button type="button" class="btn-close" @onclick="HideTransactionModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@transaction" OnValidSubmit="HandleTransactionSubmit" FormName="TransactionForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="quantity" class="form-label">Кількість:</label>
                            <InputNumber id="quantity"
                                         class="form-control"
                                         @bind-Value="transaction.Quantity" />
                        </div>

                        <div class="modal-footer">
                            <button type="button"
									class="btn btn-secondary"
									@onclick="HideTransactionModal">Скасувати</button>
                            <button type="submit"
									class="btn btn-primary" >Зберегти</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Product>? products;
    private Product? selectedProduct;
    private Transaction transaction = new Transaction();
    private TransactionType currentTransactionType;
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        products = await ProductService.GetAllProductsAsync();
    }

    private void EditProduct(int id)
    {
        NavigationManager.NavigateTo($"/edit-product/{id}");
    }

    private async Task DeleteProduct(int id)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Ви впевнені, що хочете видалити цей товар?");
        if (confirm)
        {
            await ProductService.DeleteProductAsync(id);
            await LoadProducts(); // Оновити список після видалення
        }
    }

    private void ShowTransactionModal(Product product, TransactionType type)
    {
        selectedProduct = product;
        currentTransactionType = type;
        transaction = new Transaction { ProductId = product.Id, Type = type, Quantity = 0 };
        showModal = true;
    }

    private void HideTransactionModal()
    {
        showModal = false;
        selectedProduct = null;
    }

    private async Task HandleTransactionSubmit()
    {
        if (selectedProduct == null) return;

        // Перевірка на достатню кількість при витраті
        if (transaction.Type == TransactionType.Outgoing && transaction.Quantity > selectedProduct.Quantity)
        {
            // TODO: Додати повідомлення про помилку користувачу
            Console.WriteLine("Недостатньо товару на складі для цієї операції.");
            return;
        }

        await TransactionService.AddTransactionAsync(transaction);

        // Оновлення кількості товару
        var changeAmount = (transaction.Type == TransactionType.Incoming) ? transaction.Quantity : -transaction.Quantity;
        await ProductService.UpdateProductQuantityAsync(selectedProduct.Id, changeAmount);

        // // Оновлення Price товару
        // var changePrice = (transaction.Type == TransactionType.Incoming) ? transaction.Price : -transaction.Price;
        // await ProductService.UpdateProductPriceAsync(selectedProduct.Id, changePrice);

        HideTransactionModal();
        await LoadProducts(); // Оновити список після транзакції
    }
}
