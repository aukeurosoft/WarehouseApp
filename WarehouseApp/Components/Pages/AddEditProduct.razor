@page "/add-product"
@page "/edit-product/{ProductId:int}"
@using Microsoft.AspNetCore.Components.Forms

@inject ProductService ProductService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>@(ProductId == 0 ? "Add new Item" : "Edit Item")</h3>

<EditForm Model="@product" OnValidSubmit="HandleValidSubmit" FormName=@(ProductId == 0? "add-product":"edit-product")>
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name of Item:</label>
        <InputText id="name" class="form-control" @bind-Value="product.Name" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="product.Description" />
    </div>

    <div class="mb-3">
        <label for="sku" class="form-label">SKU:</label>
        <InputText id="sku" class="form-control" @bind-Value="product.SKU" />
    </div>

    <div class="mb-3">
        <label for="unitOfMeasure" class="form-label">Unit of measure:</label>
        <InputText id="unitOfMeasure" class="form-control" @bind-Value="product.UnitOfMeasure" />
    </div>

    @*//DUK:
      YOU CAN NOT ADD QUANTITY BECAUSE OF THE PROBLEM WITH AMMOUNT.
      YOU CAN ADD IT ONLY DURING TRANSACTION.
    *@

    @* @if (ProductId == 0) // При додаванні товару можна вказати початкову кількість
    {
        <div class="mb-3">
            <label for="quantity" class="form-label">Start Quantity:</label>
            <InputNumber id="quantity" class="form-control" @bind-Value="product.Quantity" />
        </div>
    } *@
    @* else // При редагуванні товару кількість не редагується
    {
        <div class="mb-3">
            <label for="quantity" class="form-label">Початкова кількість:</label>
            <InputNumber id="quantity" class="form-control" @bind-Value="product.Quantity" />
        </div>
    } *@

    @* @if (ProductId != 0) // При редагуванні товару можна вказати ціну
    { *@

    <hr />
    <h10>YOU CAN NOT ADD QUANTITY BECAUSE OF THE PROBLEM WITH AMOUNT.</h10>
    <h6>YOU CAN ADD IT ONLY DURING TRANSACTION.</h6>
    <hr />

        <div class="mb-3">
            <label for="price" class="form-label">Price:</label>
            <InputNumber id="price" class="form-control" @bind-Value="product.Price" />
        </div>
    @* } *@
   

    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>


    <label for="nameTest" class="form-label">@product.Name</label>

</EditForm>

@code {
    [Parameter]
    public int ProductId { get; set; } = 0; // 0 для нового товару

    private Product product = new Product();

    protected override async Task OnInitializedAsync()
    {
        //product.Name = "123123";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ProductId != 0)
        {
            var existingProduct = await ProductService.GetProductByIdAsync(ProductId);
            if (existingProduct != null)
            {
                product = existingProduct;
            }
            else
            {
                // Товар не знайдено, можливо, редирект або повідомлення
                NavigationManager.NavigateTo("/products");
            }
        } 
        else
        {
            //await HandleValidSubmit();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (ProductId == 0)
        {
            await ProductService.AddProductAsync(product);
        }
        else
        {
            await ProductService.UpdateProductAsync(product);
        }
        NavigationManager.NavigateTo("/products");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/products");
    }
}
